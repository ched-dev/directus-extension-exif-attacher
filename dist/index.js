"use strict";var e=require("fs"),o=require("path"),r=require("os");function a(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var t=a(e),n=a(o),s=a(r);var i=[{prop:"date_taken",getValue:e=>e.exif?.CreateDate},{prop:"camera_make",getValue:e=>e.ifd0?.Make},{prop:"camera_model",getValue:e=>e.ifd0?.Model},{prop:"iso",getValue:e=>e.exif?.ISO},{prop:"exposure",getValue:e=>e.exif?.ExposureTime},{prop:"exposure_formatted",getValue:e=>{if(e.exif?.ExposureTime){const o=e.exif?.ExposureTime;return o<1?"1/"+Math.round(1/o):Number(o.toFixed(1))+'"'}return null}},{prop:"aperture",getValue:e=>e.exif?.FNumber},{prop:"focal_length",getValue:e=>e.exif?.FocalLength},{prop:"focal_length_in_35mm",getValue:e=>e.exif?.FocalLengthIn35mmFormat},{prop:"lens_make",getValue:e=>e.exif?.LensMake},{prop:"lens_model",getValue:e=>e.exif?.LensModel},{prop:"gps",getValue:e=>{if(e.gps?.longitude&&e.gps?.latitude){return{type:"Point",coordinates:[e.gps.longitude,e.gps.latitude]}}return null}}],l={exports:{}};const c=t.default,d=n.default,_=s.default,p=/(?:^|^)\s*(?:export\s+)?([\w.-]+)(?:\s*=\s*?|:\s+?)(\s*'(?:\\'|[^'])*'|\s*"(?:\\"|[^"])*"|\s*`(?:\\`|[^`])*`|[^#\r\n]+)?\s*(?:#.*)?(?:$|$)/gm;function m(e){console.log(`[dotenv][DEBUG] ${e}`)}const f={config:function(e){let o=d.resolve(process.cwd(),".env"),r="utf8";const a=Boolean(e&&e.debug),t=Boolean(e&&e.override);var n;e&&(null!=e.path&&(o="~"===(n=e.path)[0]?d.join(_.homedir(),n.slice(1)):n),null!=e.encoding&&(r=e.encoding));try{const e=f.parse(c.readFileSync(o,{encoding:r}));return Object.keys(e).forEach((function(o){Object.prototype.hasOwnProperty.call(process.env,o)?(!0===t&&(process.env[o]=e[o]),a&&m(!0===t?`"${o}" is already defined in \`process.env\` and WAS overwritten`:`"${o}" is already defined in \`process.env\` and was NOT overwritten`)):process.env[o]=e[o]})),{parsed:e}}catch(e){return a&&m(`Failed to load ${o} ${e.message}`),{error:e}}},parse:function(e){const o={};let r,a=e.toString();for(a=a.replace(/\r\n?/gm,"\n");null!=(r=p.exec(a));){const e=r[1];let a=r[2]||"";a=a.trim();const t=a[0];a=a.replace(/^(['"`])([\s\S]*)\1$/gm,"$2"),'"'===t&&(a=a.replace(/\\n/g,"\n"),a=a.replace(/\\r/g,"\r")),o[e]=a}return o}};l.exports.config=f.config,l.exports.parse=f.parse,l.exports=f,l.exports.config();const u=t.default,g=n.default,O=process.env.DIRECTUS_URL,E=process.env.DIRECTUS_ADMIN_EMAIL,D=process.env.DIRECTUS_ADMIN_PASSWORD,S=process.env.EXIF_DATA_MODELS_JSON_CONFIG_PATH||"./exif-attacher-config.json",N=g.resolve(__dirname+"/generated-exif-data-models.js"),A={DEBUG:!1,DIRECTUS_URL:O,DIRECTUS_ADMIN_EMAIL:E,DIRECTUS_ADMIN_PASSWORD:D,EXIF_DATA_MODELS_JSON_CONFIG_PATH:S,JSON_CONFIG_DATA_MODELS_PROP:"exif_data_models",JSON_BUILD_CONFIG_PATH:N,JSON_CONFIG_FILEPATH:void 0,JSON_CONFIG:void 0,EXIF_DATA_MODELS:void 0,EXIF_DATA_MODEL_NAMES:void 0};var I={loadConfigAndRun:async function(e){O&&E&&D||(console.error("---------- ERROR -----------"),console.error("Error: Environment variables not set. See directus-extension-exif-attacher README.md"),process.exit(0)),!1===/\.json$/.test(S)&&(console.error("---------- ERROR -----------"),console.error("Error: `EXIF_DATA_MODELS_JSON_CONFIG_PATH` Should be a .json file. See directus-extension-exif-attacher README.md"),process.exit(0)),A.JSON_CONFIG_FILEPATH=g.resolve(process.cwd()+"/"+A.EXIF_DATA_MODELS_JSON_CONFIG_PATH),u.readFile(A.JSON_CONFIG_FILEPATH,(async(o,r)=>{o&&("ENOENT"===o.code?(console.error("---------- ERROR -----------"),console.error("Error: Could not read the JSON file. Confirm the path is correct."),console.log(o)):(console.error("---------- ERROR -----------"),console.error(o)),process.exit(0));try{const o=A.JSON_CONFIG=JSON.parse(r);A.EXIF_DATA_MODELS=o&&o.hasOwnProperty(A.JSON_CONFIG_DATA_MODELS_PROP)&&o[A.JSON_CONFIG_DATA_MODELS_PROP],Array.isArray(A.EXIF_DATA_MODELS)||(console.error("---------- ERROR -----------"),console.error(`Error: JSON config should have an array on \`${A.JSON_CONFIG_DATA_MODELS_PROP}\``),process.exit(0)),A.EXIF_DATA_MODEL_NAMES=A.EXIF_DATA_MODELS.map((e=>e.name)),e()}catch(e){console.error("---------- ERROR -----------"),console.error("Error: Could not read the JSON file. Confirm the path is correct."),console.log(e)}}))},saveConfigJSON:function(e){const o=JSON.stringify(e,null,2);return u.writeFile(A.JSON_CONFIG_FILEPATH,o,(e=>{e?console.log("ERROR: Could not write config file."):console.log("Updated your JSON config file!")}))},generateExifDataModelsFile:function(){return new Promise(((e,o)=>{const r=`// WARNING: This file is auto generated. Do not modify.\nmodule.exports = ${JSON.stringify(A.EXIF_DATA_MODELS,null,2)}`;return u.writeFile(A.JSON_BUILD_CONFIG_PATH,r,(r=>{if(r)return console.log("ERROR: Could not write build config file."),void o();console.log("Created build file:",A.JSON_BUILD_CONFIG_PATH),e()}))}))},env:A};const x=[{name:"media_library",fields:["date_taken","camera_make","camera_model","iso","exposure","exposure_formatted","aperture","focal_length","focal_length_in_35mm","lens_make","lens_model","gps"],imageFieldName:"image"},{name:"media_librarys",fields:["date_taken","camera_make","camera_model","iso","exposure","exposure_formatted","aperture","focal_length","focal_length_in_35mm","lens_make","lens_model","gps"],imageFieldName:"image"}].map((e=>({...e,fields:e.fields.map((e=>i.find((o=>o.prop===e))))})));var F=({filter:e},{services:o})=>{x.map((r=>{const a=((e,o)=>async function(r,a,t){var n;const s=null===(n=t.schema)||void 0===n?void 0:n.collections[o.name],l=o.imageFieldName||"image",c=r.hasOwnProperty(l)?r[l]:void 0;if(I.DEBUG&&console.log(`${o.name} attachExifData info:`,{item:r,meta:a,collectionSchema:s,imageFieldName:l,imageId:c}),c){const a=o.fields||i;if(a.map((e=>{(null==s?void 0:s.fields.hasOwnProperty(e.prop))&&(r[e.prop]=null)})),e&&e.ItemsService){const n=new e.ItemsService("directus_files",{schema:t.schema}),i=await n.readOne(c);I.DEBUG&&console.log(`${o.name} attachExifData imageInfo:`,{imageInfo:i}),i&&i.metadata&&a.map((e=>{(null==s?void 0:s.fields.hasOwnProperty(e.prop))?r[e.prop]=e.getValue(i.metadata)||null:I.DEBUG&&console.log(`${o.name} attachExifData fieldMissing:`,{fieldProp:e.prop})}))}I.DEBUG&&console.log(`${o.name} attachExifData updated:`,{item:r})}else I.DEBUG&&console.log(`${o.name} attachExifData noImage`);return r})(o,r);e(`${r.name}.items.create`,a),e(`${r.name}.items.update`,a),console.log("exif-attacher listening for:",[`${r.name}.items.create`,`${r.name}.items.update`])}))};module.exports=F;
